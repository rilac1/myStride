### 3. 제안기법
본 논문에서 제안한 기법(이하, Adaptive-Stride)은 고정된 Stride 값을 갖는 기존의 Stride 기법에서 Stride 값을 각 프로세스의 성질에 맞게 할당하는 새로운 정책을 제안한다.
각 프로세스들에게 각기 다른 고정된 Stride 값을 할당해주는 기존의 Stride 기법과는 달리 Adaptive-Stride는 모든 프로세스에게 동일한 초기 Stride값을 할당한다.
각 프로세스는 자신에게 할당되어 있는 Stride 값만큼 시간할당량을 갖는다. 따라서 초기에는 모든 프로세스가 동일한 시간할당량을 가지게 된다.
프로세스가 Scheduling 되고 수행을 마치면 수행한 시간만큼 프로세스의 pass_value를 증가시킨다.
이 때 자신의 시간할당량을 모두 사용하면 그 프로세스에게 할당하였던 Stride 값을 두 배로 증가시킨다.
스케줄링 대상을 선정할 때에는 기존의 Stride 정책과 동일하게 가장 작은 pass_value를 갖는 프로세스를 우선적으로 선정한다.
뒤늦게 들어온 프로세스의 경우 pass_value 값을 0으로 설정하게 되면  fair-share를 만족하지 못하게 된다.
따라서 새로 들어온 프로세스의 pass_value 값은 현재 수행중인 프로세스의 pass_value 중 최솟값으로 설정한다.

```
next = 







이후 계속해서 수행을 진행하면서 해당 프로세스가 CPU-boundary한 작업일 경우 많은 Stride를 할당해주고
IO-boundary한 작업일 경우 적은 Stride를 할당해준다.


본 논문에서는 기존 Stride 정책에서 각 프로세스의 성질에 맞게 Stride 값을
조정시켜 문맥교환 횟수를 줄이는 새로운 스케줄링 정책을 제안한다. 



새로운 정책(이하, Adaptive-Stride)은 각 프로세스가 가지고 있는 




제안한 기법(이하, Adaptive-Stride)은 각 프로세스